# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { _reserved0 : [u8 ; 0x08] , actlr : Actlr , _reserved1 : [u8 ; 0x0cf4] , cpuid : Cpuid , icsr : Icsr , vtor : Vtor , aircr : Aircr , scr : Scr , ccr : Ccr , _reserved7 : [u8 ; 0x04] , shpr2 : Shpr2 , shpr3 : Shpr3 , shcsr : Shcsr , _reserved10 : [u8 ; 0x08] , dfsr : Dfsr , } impl RegisterBlock { # [doc = "0x08 - Auxiliary Control Register,"] # [inline (always)] pub const fn actlr (& self) -> & Actlr { & self . actlr } # [doc = "0xd00 - CPUID Base Register"] # [inline (always)] pub const fn cpuid (& self) -> & Cpuid { & self . cpuid } # [doc = "0xd04 - Interrupt Control and State Register"] # [inline (always)] pub const fn icsr (& self) -> & Icsr { & self . icsr } # [doc = "0xd08 - Vector Table Offset Register"] # [inline (always)] pub const fn vtor (& self) -> & Vtor { & self . vtor } # [doc = "0xd0c - Application Interrupt and Reset Control Register"] # [inline (always)] pub const fn aircr (& self) -> & Aircr { & self . aircr } # [doc = "0xd10 - System Control Register"] # [inline (always)] pub const fn scr (& self) -> & Scr { & self . scr } # [doc = "0xd14 - Configuration and Control Register"] # [inline (always)] pub const fn ccr (& self) -> & Ccr { & self . ccr } # [doc = "0xd1c - System Handler Priority Register 2"] # [inline (always)] pub const fn shpr2 (& self) -> & Shpr2 { & self . shpr2 } # [doc = "0xd20 - System Handler Priority Register 3"] # [inline (always)] pub const fn shpr3 (& self) -> & Shpr3 { & self . shpr3 } # [doc = "0xd24 - System Handler Control and State Register"] # [inline (always)] pub const fn shcsr (& self) -> & Shcsr { & self . shcsr } # [doc = "0xd30 - Debug Fault Status Register"] # [inline (always)] pub const fn dfsr (& self) -> & Dfsr { & self . dfsr } } # [doc = "ACTLR (r) register accessor: Auxiliary Control Register,\n\nYou can [`read`](crate::Reg::read) this register and get [`actlr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@actlr`]
module"] # [doc (alias = "ACTLR")] pub type Actlr = crate :: Reg < actlr :: ActlrSpec > ; # [doc = "Auxiliary Control Register,"] pub mod actlr ; # [doc = "CPUID (r) register accessor: CPUID Base Register\n\nYou can [`read`](crate::Reg::read) this register and get [`cpuid::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cpuid`]
module"] # [doc (alias = "CPUID")] pub type Cpuid = crate :: Reg < cpuid :: CpuidSpec > ; # [doc = "CPUID Base Register"] pub mod cpuid ; # [doc = "ICSR (rw) register accessor: Interrupt Control and State Register\n\nYou can [`read`](crate::Reg::read) this register and get [`icsr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`icsr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@icsr`]
module"] # [doc (alias = "ICSR")] pub type Icsr = crate :: Reg < icsr :: IcsrSpec > ; # [doc = "Interrupt Control and State Register"] pub mod icsr ; # [doc = "VTOR (rw) register accessor: Vector Table Offset Register\n\nYou can [`read`](crate::Reg::read) this register and get [`vtor::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`vtor::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@vtor`]
module"] # [doc (alias = "VTOR")] pub type Vtor = crate :: Reg < vtor :: VtorSpec > ; # [doc = "Vector Table Offset Register"] pub mod vtor ; # [doc = "AIRCR (rw) register accessor: Application Interrupt and Reset Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`aircr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`aircr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@aircr`]
module"] # [doc (alias = "AIRCR")] pub type Aircr = crate :: Reg < aircr :: AircrSpec > ; # [doc = "Application Interrupt and Reset Control Register"] pub mod aircr ; # [doc = "SCR (rw) register accessor: System Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`scr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`scr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@scr`]
module"] # [doc (alias = "SCR")] pub type Scr = crate :: Reg < scr :: ScrSpec > ; # [doc = "System Control Register"] pub mod scr ; # [doc = "CCR (r) register accessor: Configuration and Control Register\n\nYou can [`read`](crate::Reg::read) this register and get [`ccr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ccr`]
module"] # [doc (alias = "CCR")] pub type Ccr = crate :: Reg < ccr :: CcrSpec > ; # [doc = "Configuration and Control Register"] pub mod ccr ; # [doc = "SHPR2 (rw) register accessor: System Handler Priority Register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`shpr2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`shpr2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shpr2`]
module"] # [doc (alias = "SHPR2")] pub type Shpr2 = crate :: Reg < shpr2 :: Shpr2Spec > ; # [doc = "System Handler Priority Register 2"] pub mod shpr2 ; # [doc = "SHPR3 (rw) register accessor: System Handler Priority Register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`shpr3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`shpr3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shpr3`]
module"] # [doc (alias = "SHPR3")] pub type Shpr3 = crate :: Reg < shpr3 :: Shpr3Spec > ; # [doc = "System Handler Priority Register 3"] pub mod shpr3 ; # [doc = "SHCSR (rw) register accessor: System Handler Control and State Register\n\nYou can [`read`](crate::Reg::read) this register and get [`shcsr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`shcsr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@shcsr`]
module"] # [doc (alias = "SHCSR")] pub type Shcsr = crate :: Reg < shcsr :: ShcsrSpec > ; # [doc = "System Handler Control and State Register"] pub mod shcsr ; # [doc = "DFSR (rw) register accessor: Debug Fault Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`dfsr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dfsr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dfsr`]
module"] # [doc (alias = "DFSR")] pub type Dfsr = crate :: Reg < dfsr :: DfsrSpec > ; # [doc = "Debug Fault Status Register"] pub mod dfsr ;