# [doc = "Register `MOD` reader"] pub type R = crate :: R < ModSpec > ; # [doc = "Register `MOD` writer"] pub type W = crate :: W < ModSpec > ; # [doc = "Field `MOD` reader - Modulo value"] pub type ModR = crate :: FieldReader < u16 > ; # [doc = "Field `MOD` writer - Modulo value"] pub type ModW < 'a , REG > = crate :: FieldWriter < 'a , REG , 16 , u16 > ; impl R { # [doc = "Bits 0:15 - Modulo value"] # [inline (always)] pub fn mod_ (& self) -> ModR { ModR :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15 - Modulo value"] # [inline (always)] # [must_use] pub fn mod_ (& mut self) -> ModW < ModSpec > { ModW :: new (self , 0) } } # [doc = "Modulo\n\nYou can [`read`](crate::Reg::read) this register and get [`mod_::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`mod_::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct ModSpec ; impl crate :: RegisterSpec for ModSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`mod_::R`](R) reader structure"] impl crate :: Readable for ModSpec { } # [doc = "`write(|w| ..)` method takes [`mod_::W`](W) writer structure"] impl crate :: Writable for ModSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets MOD to value 0xffff"] impl crate :: Resettable for ModSpec { const RESET_VALUE : u32 = 0xffff ; }